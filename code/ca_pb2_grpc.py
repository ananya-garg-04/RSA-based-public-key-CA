# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ca_pb2 as ca__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ca_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CAServiceStub(object):
    """Define the RPC service for Certificate Authority (CA)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterClient = channel.unary_unary(
                '/CAService/RegisterClient',
                request_serializer=ca__pb2.RegisterClientRequest.SerializeToString,
                response_deserializer=ca__pb2.RegisterClientResponse.FromString,
                _registered_method=True)
        self.RequestCertificate = channel.unary_unary(
                '/CAService/RequestCertificate',
                request_serializer=ca__pb2.CertificateRequest.SerializeToString,
                response_deserializer=ca__pb2.Certificate.FromString,
                _registered_method=True)
        self.RequestCAPublicKey = channel.unary_unary(
                '/CAService/RequestCAPublicKey',
                request_serializer=ca__pb2.CAPublicKeyRequest.SerializeToString,
                response_deserializer=ca__pb2.CAPublicKey.FromString,
                _registered_method=True)
        self.VerifyCertificate = channel.unary_unary(
                '/CAService/VerifyCertificate',
                request_serializer=ca__pb2.CertificateVerifyRequest.SerializeToString,
                response_deserializer=ca__pb2.CertificateVerifyResponse.FromString,
                _registered_method=True)


class CAServiceServicer(object):
    """Define the RPC service for Certificate Authority (CA)
    """

    def RegisterClient(self, request, context):
        """RPC method for client registration with the CA
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestCertificate(self, request, context):
        """RPC method for client to request its certificate from the CA
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestCAPublicKey(self, request, context):
        """RPC method for client to request Public Key of CA
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCertificate(self, request, context):
        """RPC method for client to verify a certificate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CAServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterClient': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterClient,
                    request_deserializer=ca__pb2.RegisterClientRequest.FromString,
                    response_serializer=ca__pb2.RegisterClientResponse.SerializeToString,
            ),
            'RequestCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestCertificate,
                    request_deserializer=ca__pb2.CertificateRequest.FromString,
                    response_serializer=ca__pb2.Certificate.SerializeToString,
            ),
            'RequestCAPublicKey': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestCAPublicKey,
                    request_deserializer=ca__pb2.CAPublicKeyRequest.FromString,
                    response_serializer=ca__pb2.CAPublicKey.SerializeToString,
            ),
            'VerifyCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCertificate,
                    request_deserializer=ca__pb2.CertificateVerifyRequest.FromString,
                    response_serializer=ca__pb2.CertificateVerifyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CAService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('CAService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CAService(object):
    """Define the RPC service for Certificate Authority (CA)
    """

    @staticmethod
    def RegisterClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CAService/RegisterClient',
            ca__pb2.RegisterClientRequest.SerializeToString,
            ca__pb2.RegisterClientResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CAService/RequestCertificate',
            ca__pb2.CertificateRequest.SerializeToString,
            ca__pb2.Certificate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestCAPublicKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CAService/RequestCAPublicKey',
            ca__pb2.CAPublicKeyRequest.SerializeToString,
            ca__pb2.CAPublicKey.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CAService/VerifyCertificate',
            ca__pb2.CertificateVerifyRequest.SerializeToString,
            ca__pb2.CertificateVerifyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MessageExchangeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReceiveEncryptedMessage = channel.unary_unary(
                '/MessageExchangeService/ReceiveEncryptedMessage',
                request_serializer=ca__pb2.EncryptedMessage.SerializeToString,
                response_deserializer=ca__pb2.Acknowledgement.FromString,
                _registered_method=True)


class MessageExchangeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReceiveEncryptedMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageExchangeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReceiveEncryptedMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveEncryptedMessage,
                    request_deserializer=ca__pb2.EncryptedMessage.FromString,
                    response_serializer=ca__pb2.Acknowledgement.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MessageExchangeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MessageExchangeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MessageExchangeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReceiveEncryptedMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MessageExchangeService/ReceiveEncryptedMessage',
            ca__pb2.EncryptedMessage.SerializeToString,
            ca__pb2.Acknowledgement.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
